//最短路径的C语言实现——The implementation of the shortest path in C language
#include<stdio.h>
//无限大的定义，根据数据更改
#define inf 9999
//矩阵大小，可理解为地点数
#define size 6
int shortest_distance(int(*dis)[size], int i, int j, int status, int* point);

//输出
void putout(int (*dis)[size],int i, int j,int* point)
{
	int s;
	printf("From %c to %c: %c", i + 'A', j + 'A', i + 'A');
	s = shortest_distance(dis, i, j, 1, point);
	printf("\tDistance:%d", s);
}

void main()
{
  //需输入距离矩阵
	int distance[size][size] = 
  { {0,7,9,inf,inf,14},
  {7,0,10,15,inf,inf},
  {9,10,0,11,inf,2},
  {inf,15,11,0,6,inf},
  {inf,inf,inf,6,0,9},
  {14,inf,2,inf,9,0} };
	int i, j, point[size], k;
	for (i = 0; i < size; i++)
		point[i] = 0;
	for (i = 0; i < size; i++)
		for (j = 0; j < size; j++)
		{
			if (i == j)
				continue;
			putout(distance, i, j, point);
			for (k = 0; k < size; k++)
				point[k] = 0;
			printf("\n");
		}
}


//查找最短路径
int shortest_distance(int(*dis)[size], int i, int j,int status,int* point)
{
	int sot_dis = dis[i][j], k, k_s = -1, temp, k_2;
	//dis——距离矩阵
	// i,j——起点，终点
	// status——状态，用于判断函数调用状态，1表示函数中起点、终点已固定，0则反之
	// point——地点状态，用于记录地点是否已使用
	// k_s——插入的地点
	point[i] = -1; point[j] = -1;
	for (k = 0; k < size; k++)//尝试只插入一个地点
	{
		if (point[k]==-1)
			continue;
		if (sot_dis > dis[i][k] + dis[k][j])
		{
			sot_dis = dis[i][k] + dis[k][j];
			k_s = k;
		}
	}
	if (k_s == -1)//判断插入一个地点是否可行
		for (k = 0; k < size; k++)//循环插入其他地点
		{
			if (point[k]==-1)//排除已有地点
				continue;
			if ((temp = shortest_distance(dis, i, k, 0, point) + shortest_distance(dis, k, j, 0, point)) < sot_dis)//判断距离是否更短
			{
				sot_dis = temp;
				k_s = k;
			}
			else
				point[k] = 0;//插入失败归零（可能和下一步重复？）
			if (status == 1)//地址状态清零
			{
				for (k_2 = 0; k_2 < size; k_2++)
					point[k_2] = k_2;
				point[i] = -1; point[j] = -1;
			}
		}
	if(k_s!=-1)
		sot_dis = shortest_distance(dis, i, k_s, status, point) + shortest_distance(dis, k_s, j, status, point);
	else if(status == 1)
		printf("->%c", j + 'A');
	return sot_dis;
}
